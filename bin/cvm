#!/usr/bin/env bash

CVM_PREFIX=${CVM_PREFIX-/usr/local}
VERSIONS_DIR=$CVM_PREFIX/n/versions
CORTEX_MIRROR=${CORTEX_MIRROR-http://registry.npmjs.org}

#
# Log <type> <msg>
#
log() {
  printf "  \033[36m%10s\033[0m : \033[90m%s\033[0m\n" $1 $2
}

#
# Exit with the given <msg ...>
#
abort() {
  printf "\n  \033[31mError: $@\033[0m\n\n" && exit 1
}

#
# Ensure we have curl or wget support.
#
GET=

# wget support (Added --no-check-certificate for Github downloads)
command -v wget > /dev/null && GET="wget --no-check-certificate -q -O-"
command -v curl > /dev/null && GET="curl -# -L"
test -z "$GET" && abort "curl or wget required"

#
# Display help information
#
display_help() {
  cat <<-EOF

  Usage: n [COMMAND] [args]

  Commands:
    cvm                       Output versions installed
    cvm latest                Install the latest cortex
    cvm <version>             Install cortex <version>
    cvm use <version>         Switch to the given version
    cvm rm <version ...>      Remove the given version(s)
    cvm list, cvm ls          Output the versions of cortex available

    -V, --version             Output current version of n
    -h, --help                Display help information

EOF
  exit 0
}

#
# Display sorted versions directories paths.
#
versions_paths() {
  ls -d $VERSIONS_DIR/* \
    | egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
    | sort -k 1,1n -k 2,2n -k 3,3n -t .
}


#
# Check for installed version, and populate $active
#
check_current_version() {
  command -v cortex &> /dev/null
  if test $? -eq 0; then
    active=`node --version`
    active=${active#v}
  fi
}

#
# List installed versions.
#
list_versions_installed() {
  for dir in `versions_paths`; do
    local version=${dir##*/}
    echo $version
  done
}

#
# Download a resource `$1` into directory `$2`
#
download() {
  wget $1
}

#
# Check if the HEAD response of <url> is 200.
#
is_ok() {
  curl -Is $1 | head -n 1 | grep 200 > /dev/null
}

#
# Generate the tarbal url by version `$1`
#
tarball_url() {
  local v="$1"
  echo "$CORTEX_MIRROR/cortex/-/cortex-$v.tgz"
}

#
# Activate <version>
#
activate() {
  local version=$1
  check_current_version
  if test "$version" != "$active"; then
    local dir=$VERSIONS_DIR/$version
    echo $active > $VERSIONS_DIR/.prev
    cp -fR $dir/bin $dir/lib $dir/include $dir/share $N_PREFIX
  fi
}

#
# Install cortex
#
install_cortex() {
  # Remove leading `'v'`
  local version=${1#v}

  local dots=`echo $version | sed 's/[^.]*//g'`
  if test ${#dots} -eq 1; then
    version=`$GET 2> /dev/null $CORTEX_MIRROR \
      | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
      | egrep -v '^0\.[0-7]\.' \
      | egrep -v '^0\.8\.[0-5]$' \
      | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
      | egrep ^$version \
      | tail -n1`

    test $version || abort "invalid version ${1#v}"
  fi

  local dir=$VERSIONS_DIR/$version
  local url=$(tarball_url $version)

  # If already installed, activate it.
  if test -d $dir; then
    if [[ ! -e $dir/n.lock ]] ; then
      activate $version
      exit
    fi
  fi

  echo
  log install v$version

  is_ok $url || abort "invalid version $version"

  log mkdir $dir
  mkdir -p $dir
  if [ $? -ne 0 ] ; then
    abort "sudo required"
  else
    touch $dir/n.lock
  fi

  cd $dir

  log fetch $url
  curl -L# $url | tar -zx --strip 1
  erase_line
  rm -f $dir/n.lock

  activate $version
  log installed $(node --version)
  echo
}

#
# Activate <version>
#
activate() {
  local version=$1
  check_current_version
  if test "$version" != "$active"; then
    local dir=$VERSIONS_DIR/$version
    echo $active > $VERSIONS_DIR/.prev
    cp -fR $dir/bin $dir/lib $dir/include $dir/share $N_PREFIX
  fi
}

#
# 
#
cvm_strip_path() {

}

#
# 
#
cvm_prepend_path() {

}


# Credit
# A lot of bash functions from visionmedia/n

# (The MIT License)
# Copyright (c) 2014 TJ Holowaychuk <tj@vision-media.ca>

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# 'Software'), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
