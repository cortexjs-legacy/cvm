#!/usr/bin/env bash

# Log
# --------------------------------------------------------------------
CVM_DEBUG=${CVM_DEBUG-0}
#
# Print debug info
debug() {
  if [[ "$CVM_DEBUG" != "0" ]]; then
    printf "     \x1B[35m[debug]\x1B[0m : \x1B[90m$1\x1B[0m\n"
  fi
}

#
# Log <type> <msg>
log() {
  printf "  \x1B[36m%10s\x1B[0m : \x1B[90m%s\x1B[0m\n" $1 $2
}

#
# Exit with the given <msg ...>
abort() {
  printf "\n  \x1B[31mError: $@\x1B[0m\n\n" && exit 1
}


# Utilities
# --------------------------------------------------------------------

CVM_VERSION="0.1.0"
CVM_PREFIX=${CVM_PREFIX-/usr/local}
VERSIONS_DIR=$CVM_PREFIX/cvm/versions
CORTEX_MIRROR=${CORTEX_MIRROR-http://registry.npmjs.org}

debug "CVM_VERSION  : $CVM_VERSION"
debug "CVM_PREFIX   : $CVM_PREFIX"
debug "VERSIONS_DIR : $VERSIONS_DIR"
debug "CORTEX_MIRROR: $CORTEX_MIRROR"

# Make dir if not exists
if [[ ! -d "$VERSIONS_DIR" ]]; then
  mkdir -p "$VERSIONS_DIR" || abort "unable to create dir $VERSIONS_DIR"
fi

#
# Test if a command `$1` exists
cvm_test_command() {
  command -v "$1" > /dev/null 2>&1
  return $?
}

#
# Check if command npm is available, if not it will fail
check_npm() {
  cvm_test_command "npm" || abort "npm and node are required"
}

#
# Strip path `$2` from `$1`
cvm_strip_path() {
  echo "$1" | sed -e "s#$NVM_DIR/[^/]*$2[^:]*:##g" -e "s#:$NVM_DIR/[^/]*$2[^:]*##g" -e "s#$NVM_DIR/[^/]*$2[^:]*##g"
}

#
# Prepend `$2` to the beginning of `$1`
cvm_prepend_path() {
  if [ -z "$1" ]; then
    echo "$2"
  else
    echo "$2:$1"
  fi
}

#
# Ensure we have curl or wget support.
GET=

# wget support (Added --no-check-certificate for Github downloads)
cvm_test_command "wget" && GET="wget --no-check-certificate -q -O-"
cvm_test_command "curl" && GET="curl -# -L"
test -z "$GET" && abort "curl or wget required"
debug "GET: $GET"



#
# Display sorted versions directories paths.
versions_paths() {
  ls -d $VERSIONS_DIR/* \
    | egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
    | sort -k 1,1n -k 2,2n -k 3,3n -t .
}

#
# Check for installed version, and populate $active
check_current_version() {
  command -v cortex &> /dev/null
  if test $? -eq 0; then
    active=`cortex -v`
  fi
}

#
# List installed versions.
list_versions_installed() {
  for dir in `versions_paths`; do
    local version=${dir##*/}
    echo $version
  done
}

#
# Display installed versions with <selected>
display_versions_with_selected() {
  selected=$1
  echo
  for dir in `versions_paths`; do
    local version=${dir##*/}
    if test "$version" = "$selected"; then
      printf "  \033[36mÎ¿\033[0m $version\033[0m\n"
    else
      printf "    \033[90m$version\033[0m\n"
    fi
  done
  echo
}

#
# List installed versions.
list_versions_installed() {
  for dir in `versions_paths`; do
    local version=${dir##*/}
    echo $version
  done
}

#
# Download a resource `$1` into directory `$2`
download() {
  wget $1
}

#
# Check if the HEAD response of <url> `$1` is 200.
is_ok() {
  curl -Is $1 | head -n 1 | grep 200 > /dev/null
}

#
# Generate the tarbal url by version `$1`
tarball_url() {
  local v="$1"
  echo "$CORTEX_MIRROR/cortex/-/cortex-$v.tgz"
}

#
# Activate <version>
activate() {
  local version=$1
  check_current_version
  if test "$version" != "$active"; then
    local dir=$VERSIONS_DIR/$version
    echo $active > $VERSIONS_DIR/.prev
    cp -fR $dir/bin $dir/lib $dir/include $dir/share $N_PREFIX
  fi
}

#
# Activate <version>
activate() {
  local version=$1
  check_current_version
  if test "$version" != "$active"; then
    local dir=$VERSIONS_DIR/$version
    echo $active > $VERSIONS_DIR/.prev
    cp -fR $dir/bin $dir/lib $dir/include $dir/share $N_PREFIX
  fi
}

# Actions
# --------------------------------------------------------------------
UP=$'\x1B[A'
DOWN=$'\x1B[B'
#
# Display current node --version and others installed.
display_versions() {
  clear
  check_current_version
  display_versions_with_selected $active

  while true; do
    read -s -n 3 c
    case "$c" in
      $UP)
        clear
        display_versions_with_selected $(prev_version_installed)
        ;;
      $DOWN)
        clear
        display_versions_with_selected $(next_version_installed)
        ;;
      *)
        clear
        activate $selected
        exit
        ;;
    esac
  done
}

display_cvm_version() {
  echo "$CVM_VERSION"
}

#
# Display help information
display_help() {
  printf "\n  \x1B[1mUsage:\x1B[0m cvm [COMMAND] [args]\n"
  printf "\n  \x1B[1mCommands:\x1B[0m\n"
  cat <<-EOF

    cvm                       Output versions installed
    cvm <version>             Install cortex <version>
    cvm rm <version ...>      Remove the given version(s)
    cvm list, cvm ls          Output the versions of cortex available

    -v, --version             Output current version of cvm
    -h, --help                Display help information

EOF
}

#
# Remove <version ...>
remove_versions() {
  test -z $1 && abort "version(s) required"
  while test $# -ne 0; do
    rm -rf $VERSIONS_DIR/${1#v}
    shift
  done
}

#
# Install cortex with version `$1`
install() {
  # Remove leading `'v'`
  local version=${1#v}

  local dots=`echo $version | sed 's/[^.]*//g'`
  if test ${#dots} -eq 1; then
    version=`$GET 2> /dev/null $CORTEX_MIRROR \
      | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
      | egrep -v '^0\.[0-7]\.' \
      | egrep -v '^0\.8\.[0-5]$' \
      | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
      | egrep ^$version \
      | tail -n1`

    test $version || abort "invalid version ${1#v}"
  fi

  local dir=$VERSIONS_DIR/$version
  local url=$(tarball_url $version)

  # If already installed, activate it.
  if test -d $dir; then
    if [[ ! -e $dir/n.lock ]] ; then
      activate $version
      exit
    fi
  fi

  echo
  log install v$version

  is_ok $url || abort "invalid version $version"

  log mkdir $dir
  mkdir -p $dir
  if [ $? -ne 0 ] ; then
    abort "sudo required"
  else
    touch $dir/n.lock
  fi

  cd $dir

  log fetch $url
  curl -L# $url | tar -zx --strip 1
  erase_line
  rm -f $dir/n.lock

  activate $version
  log installed $(node --version)
  echo
}


if test $# -eq 0; then
  test "$(ls -l $VERSIONS_DIR | grep ^d)" || abort "no installed versions"
  display_versions
else
  while test $# -ne 0; do
    case $1 in
      "-v" | "--version")
        display_cvm_version
        ;;

      "-h" | "--help" | "help")
        display_help
        ;;

      "-i" | "--install")
        install $1
        ;;

      "rm")
        shift
        remove_versions $@
        ;;

      *)
        install $1
        activate $1
        ;;
    esac
    exit
  done
fi


# Credit
# A lot of bash functions from visionmedia/n

# (The MIT License)
# Copyright (c) 2014 TJ Holowaychuk <tj@vision-media.ca>

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# 'Software'), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
