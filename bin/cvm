#!/usr/bin/env bash

# Inspired by [visionmedia/n](http://github.com/visionmedia/n)

# Globals
# --------------------------------------------------------------------
CVM_DEBUG=${CVM_DEBUG-0}
CVM_VERSION="0.1.0"
CVM_PREFIX=${CVM_PREFIX-/usr/local}
CVM_MIRROR=${CVM_MIRROR-http://registry.npmjs.org}

# Log
# --------------------------------------------------------------------

#
# Print debug info
debug() {
  if [[ "$CVM_DEBUG" != "0" ]]; then
    printf "     \x1B[35m[debug]\x1B[0m : \x1B[90m$1\x1B[0m\n"
  fi
}

#
# Log <type> <msg>
log() {
  local label=$1
  shift
  printf "  \x1B[36m%10s\x1B[0m :" $label
  printf " \x1B[90m$@\x1B[0m\n"
}

#
# Exit with the given <msg ...>
abort() {
  printf "\n  \x1B[31mError: $@\x1B[0m\n\n"
  exit 1
}


# Utilities
# --------------------------------------------------------------------
VERSIONS_DIR="$CVM_PREFIX/cvm/versions"

debug "CVM_VERSION  : $CVM_VERSION"
debug "CVM_PREFIX   : $CVM_PREFIX"
debug "CVM_MIRROR   : $CVM_MIRROR"
debug "VERSIONS_DIR : $VERSIONS_DIR"

#
# Test if a command `$1` exists
test_command() {
  command -v "$1" > /dev/null 2>&1
  return $?
}

#
# Move up a line and erase.
erase_line() {
  printf "\033[1A\033[2K"
}

#
# Check if command npm is available, if not it will fail
check_npm() {
  test_command "npm" || abort "npm and node are required"
}

#
# Ensure we have curl or wget support.
GET=

# wget support (Added --no-check-certificate for Github downloads)
test_command "wget" && GET="wget --no-check-certificate -q -O-"
test_command "curl" && GET="curl -# -L"
test -z "$GET" && abort "curl or wget required"
debug "GET: $GET"


#
# Display sorted versions directories paths.
versions_paths() {
  ls -d $VERSIONS_DIR/* \
    | egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
    | sort -k 1,1n -k 2,2n -k 3,3n -t .
}

#
# Check for installed version, and populate $active
check_current_version() {
  command -v cortex &> /dev/null
  if test $? -eq 0; then
    active=`cortex -v`
  fi
}

#
# List installed versions.
list_versions_installed() {
  for dir in `versions_paths`; do
    local version=${dir##*/}
    echo $version
  done
}

#
# Display installed versions with <selected>
display_versions_with_selected() {
  selected=$1
  echo
  for dir in `versions_paths`; do
    local version=${dir##*/}
    if test "$version" = "$selected"; then
      printf "  \033[36mÎ¿\033[0m $version\033[0m\n"
    else
      printf "    \033[90m$version\033[0m\n"
    fi
  done
  echo
}

#
# List installed versions.
list_versions_installed() {
  for dir in `versions_paths`; do
    local version=${dir##*/}
    echo $version
  done
}

#
# Output version after selected.
next_version_installed() {
  list_versions_installed | grep $selected -A 1 | tail -n 1
}

#
# Output version before selected.
prev_version_installed() {
  list_versions_installed | grep $selected -B 1 | head -n 1
}

#
# Check if the HEAD response of <url> `$1` is 200.
is_ok() {
  curl -Is $1 | head -n 1 | grep 200 > /dev/null
}

#
# Generate the tarbal url by version `$1`
tarball_url() {
  local v="$1"
  echo "$CVM_MIRROR/cortex/-/cortex-$v.tgz"
}

#
# Test if the version is valid
test_version() {
  return
}

#
# Test if there are versions exist
versions_exist() {
  if test "$(ls -l $VERSIONS_DIR | grep ^d)"; then
    return
  else
    return 1
  fi
}

# Actions
# --------------------------------------------------------------------
UP=$'\x1B[A'
DOWN=$'\x1B[B'
#
# Display current node --version and others installed.
display_versions() {
  clear
  check_current_version
  display_versions_with_selected $active

  while true; do
    read -s -n 3 c
    case "$c" in
      $UP)
        clear
        display_versions_with_selected $(prev_version_installed)
        ;;
      $DOWN)
        clear
        display_versions_with_selected $(next_version_installed)
        ;;
      *)
        clear
        activate $selected
        echo
        exit
        ;;
    esac
  done
}

display_cvm_version() {
  echo "$CVM_VERSION"
}

#
# Display help information
display_help() {
  echo
  printf "  \x1B[1mC\x1B[0m\x1B[90mortex\x1B[0m \x1B[1mV\x1B[0m\x1B[90mersion\x1B[0m \x1B[1mM\x1B[0m\x1B[90manager\x1B[0m\n"
  echo
  printf "  \x1B[1mUsage:\x1B[0m cvm [COMMAND] [args]\n"
  echo
  printf "  \x1B[1mCommands:\x1B[0m\n"
  echo
  printf "  cvm <version>             \x1B[90mInstall and activate cortex@<version>\x1B[0m\n"
  printf "  cvm install <version>     \x1B[90mInstall cortex@<version>\x1B[0m\n"
  printf "  cvm use <version>         \x1B[90mActivate cortex@<version>\x1B[0m\n"
  printf "  cvm rm <version ...>      \x1B[90mRemove the given version(s)\x1B[0m\n"
  printf "  cvm ls                    \x1B[90mOutput versions of cortex installed\x1B[0m\n"
  echo
  printf "  -v, --version             \x1B[90mOutput current version of cvm\x1B[0m\n"
  printf "  -h, --help                \x1B[90mDisplay help information\x1B[0m\n\n"
}

#
# Remove <version ...>
remove_versions() {
  test -z $1 && abort "version(s) required"
  while test $# -ne 0; do
    rm -rf $VERSIONS_DIR/${1#v} || abort "sudo required, maybe"
    log "removed" ${1#v}
    shift
  done
}

#
# Install cortex with version `$1`
install() {
  # Remove leading `'v'`
  local version=${1#v}
  test_version "$version" || abort "invalid version $version"

  local dir="$VERSIONS_DIR/$version"
  local url=$(tarball_url $version)
  debug "tarball: $url"

  # If already installed, activate it.
  if [[ -d "$dir" ]]; then
    log "exists" "$version at $dir"
    return
  fi

  echo
  log "install" "$version"

  is_ok "$url" || abort "remove $version not found, tarball is not ok"

  log "mkdir" "$dir"
  mkdir -p "$dir"
  if [[ $? -ne 0 ]] ; then
    abort "sudo required, maybe"
  else
    touch "$dir/cvm.lock"
  fi

  cd $dir

  log "fetch" "$url"
  curl -L# "$url" | tar -zx --strip 1
  erase_line
  rm -f "$dir/cvm.lock"

  log "run" "npm install"
  echo
  npm install 1> /dev/null || abort "fails to npm install, maybe sudo required"

  local bin="$dir/bin/cortex-cli.js"
  mkdir -p "$dir/.bin"
  ln -sf "$bin" "$dir/.bin/cortex"

  log "installed" "$version at $dir"
}

#
# Activate <version>
activate() {
  local version=$1
  check_current_version
  if test "$version" != "$active"; then
    local dir="$VERSIONS_DIR/$version"
    local bin="$CVM_PREFIX/bin/cortex"
    local cvm_bin="$dir/bin/cortex-cli.js"

    if [[ -e "$dir/cvm.lock" ]] ; then
      return
    fi

    ln -sf "$cvm_bin" "$bin"
    if [[ $? -ne 0 ]]; then
      abort "unable to link, sudo required, maybe"
    fi

    log "link" "$bin -> $cvm_bin"
    log "activated" "$version"
  else
    log "activated" "$version already activated"
  fi
}


if test $# -eq 0; then
  display_help
else
  while test $# -ne 0; do
    case $1 in
      "-v" | "--version" )
        display_cvm_version
        ;;

      "-h" | "--help" | "help" )
        display_help
        ;;

      "i" | "install" )
        shift
        install $1
        ;;

      "rm" )
        shift
        remove_versions $@
        ;;

      "ls" | "list" )
        versions_exist || abort "no installed versions"
        display_versions
        ;;

      "use" )
        shift
        activate $1
        ;;

      *)
        install $1
        activate $1
        ;;
    esac
    exit
  done
fi
